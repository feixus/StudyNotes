#version 450

struct Particle {
    vec2 position;
    vec2 velocity;
    vec4 color;
};

layout (binding = 0) uniform ParameterUBO {
    float deltaTime;
} ubo;

layout (std140, binding = 1) readonly buffer ParticleSSBOIn {
    Particle particlesIn[];
};

layout (std140, binding = 2) buffer ParticleSSBOOut {
    Particle particleOut[];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main()
{
    uint index = gl_GlobalInvocationID.x;

    Particle particleIn = particlesIn[index];

    particleOut[index].position = particleIn.position + particleIn.velocity.xy * ubo.deltaTime;
    particleOut[index].velocity = particleIn.velocity;

    // flip movement at window border
    if ((particleOut[index].position.x <= -1.0) || (particleOut[index].position.x >= 1.0)) {
        particleOut[index].velocity.x = - particleOut[index].velocity.x;
    }
    if ((particleOut[index].position.y <= -1.0) || (particleOut[index].position.y >= 1.0)) {
        particleOut[index].velocity.y = - particleOut[index].velocity.y;
    }
}